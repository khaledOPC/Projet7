# Créé par https://www.toptal.com/developers/gitignore/api/python
# Modifier sur https://www.toptal.com/developers/gitignore?templates=python

###Python ###
# Fichiers compilés / optimisés / DLL
__pycache__/
*.py[code]
*$py.class

# Extensions C
*.alors

# Distribution / conditionnement
.Python
construire/
develop-eggs/
distance/
téléchargements/
des œufs/
.des œufs/
lib/
lib64/
les pièces/
sdist/
var/
roues/
partager/roues-python/
*.oeuf-info/
.installé.cfg
*.Oeuf
MANIFESTE

#PyInstaller
# Habituellement, ces fichiers sont écrits par un script python à partir d'un modèle
# avant que PyInstaller ne construise l'exe, afin d'y injecter la date/d'autres informations.
*.manifeste
*.spec

# Journaux du programme d'installation
pip-log.txt
pip-delete-ce-repertoire.txt

# Tests unitaires / rapports de couverture
htmlcov/
.tox/
.nox/
.couverture
.couverture.*
.cache
nosestests.xml
couverture.xml
*.couverture
*.py, couverture
.hypothèse/
.pytest_cache/
couverture/

# Traductions
*.mo
*.pot

# Trucs Django :
*.Journal
local_settings.py
db.sqlite3
db.sqlite3-journal

# Trucs de flacon :
exemple/
.webassets-cache

# Trucs décousus :
.scrapy

# Documentation Sphinx
docs/_build/

#PyBuilder
.pybuilder/
cible/

# Cahier Jupyter
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
# Pour une bibliothèque ou un package, vous pouvez ignorer ces fichiers car le code est
# destiné à fonctionner dans plusieurs environnements ; sinon, enregistrez-les :
# .python-version

# pipenv
# Selon pypa/pipenv#598, il est recommandé d'inclure Pipfile.lock dans le contrôle de version.
# Cependant, en cas de collaboration, si vous avez des dépendances spécifiques à la plate-forme ou des dépendances
# n'ayant pas de support multiplateforme, pipenv peut installer des dépendances qui ne fonctionnent pas, ou pas
# installez toutes les dépendances nécessaires.
#Pipfile.lock

# poésie
# Semblable à Pipfile.lock, il est généralement recommandé d'inclure poet.lock dans le contrôle de version.
# Ceci est particulièrement recommandé pour les packages binaires afin d'assurer la reproductibilité, et est plus
# généralement ignoré pour les bibliothèques.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poésie.lock

# pdm
# Semblable à Pipfile.lock, il est généralement recommandé d'inclure pdm.lock dans le contrôle de version.
#pdm.lock
# pdm stocke les configurations à l'échelle du projet dans .pdm.toml, mais il est recommandé de ne pas l'inclure
# dans le contrôle de version.
# https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582 ; utilisé par exemple par github.com/David-OConnor/pyflow et github.com/pdm-project/pdm
__pypackages__/

# Trucs de céleri
horaire de céleri
celerybeat.pid

# fichiers analysés par SageMath
*.sage.py

# Environnements
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Paramètres du projet Spyder
.spyderproject
.spyproject

# Paramètres du projet de corde
.ropeproject

#documentation mkdocs
/placer

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Vérificateur de type bûcher
.bûcher/

# analyseur de type statique pytype
.pytype/

# Symboles de débogage Cython
cython_debug/

#PyCharm
# Le modèle spécifique de JetBrains est conservé dans un JetBrains.gitignore distinct qui peut
# se trouve sur https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# et peut être ajouté au gitignore global ou fusionné dans ce fichier. Pour un plus nucléaire
# option (non recommandée), vous pouvez décommenter ce qui suit pour ignorer tout le dossier d'idées.
#.idée/

# Fin de https://www.toptal.com/developers/gitignore/api/python